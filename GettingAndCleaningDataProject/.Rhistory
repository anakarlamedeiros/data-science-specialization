unionset <- rbind(processTestDataset(), processTrainingDataset())
## This function checks whether a measurement label contains
## the substrings "mean()" or "std()".
isMedianOrMeanMeasurement <- function (measurement=""){
## testing whether measurement refers to the mean or standard deviation
return(length(grep("mean()", measurement, fixed=TRUE)) > 0
|| length(grep("std()", measurement, fixed=TRUE)) > 0)
}
## This function reads and process the test dataset.
## The processing steps includes:
##      * Keeping only the columns with the mean and standard deviation
##        for each measurement
##      * Adding a column for the subjects
##      * Adding columns with the activity identifier and the activity
processDataset <- function(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTests, colNameSubjectID,
fileAcivityClassifications, fileTestSet){
## Reading the test files
#### Reading the feature labels for the columns in the test and training datasets
featuresLabels <- read.table(fileFeatureLabels)
indexMeasurementsToKeep <- which(sapply(featuresLabels$V2,isMedianOrMeanMeasurement))
#### Reading the activity labels for the test and training datasets
activityLabels <- read.table(fileActivityLabels)
colnames(activityLabels) <- c(colActivityID, colActivity)
#### Reading the subject identifiers (ID) for the test dataset
testSubjectsIDs <- read.table(fileSubjectTests)
colnames(testSubjectsIDs) <- colNameSubjectID
#### Reading the activity identifiers for the test data
activityClassification <- read.table(fileAcivityClassifications)
colnames(activityClassification) <- c(colActivityID)
activityClassification <- merge(activityClassification, activityLabels, by.x=colActivityID, by.y=colActivityID, all=TRUE)
#### Reading the test dataset
testDataset <- read.table(fileTestSet)
colnames(testDataset) <- featuresLabels[,2]
print("Reading file")
print(fileTestSet)
print("Number rows = ")
print(nrow(testDataset))
## Processing the test dataset to return
#### Extracting the mean and standard deviations measurements
testDataset <- testDataset[, indexMeasurementsToKeep]
#### Adding the subjects and the activities to the test dataset
processedTestDataset <- cbind(testSubjectsIDs, activityClassification, testDataset)
#### returning the processed test dataset
return (processedTestDataset)
}
processTestDataset <- function(){
## Setting the locations of the test files
locationMainDirectoryData <- "./UCI_HAR_Dataset"
locationTestDirectoryData <- paste(locationMainDirectoryData, "/test", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTestSet <- paste(locationTestDirectoryData, "/X_test.txt", sep="")
fileSubjectTests <- paste(locationTestDirectoryData, "/subject_test.txt", sep="")
fileAcivityClassifications <- paste(locationTestDirectoryData, "/y_test.txt", sep="")
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "subject_identifier"
colActivityID <- "activity_id"
colActivity <- "activity"
processedTestDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTests, colNameSubjectID,
fileAcivityClassifications,
fileTestSet)
return (processedTestDataset)
}
processTrainingDataset <- function(){
## Setting the locations of the training files
locationMainDirectoryData <- "./UCI_HAR_Dataset"
locationTrainingDirectoryData <- paste(locationMainDirectoryData, "/train", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTrainingSet <- paste(locationTrainingDirectoryData, "/X_train.txt", sep="")
fileSubjectTraining <- paste(locationTrainingDirectoryData, "/subject_train.txt", sep="")
fileAcivityClassifications <- paste(locationTrainingDirectoryData, "/y_train.txt", sep="")
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "subject_identifier"
colActivityID <- "activity_id"
colActivity <- "activity"
processedTrainingDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTraining, colNameSubjectID,
fileAcivityClassifications,
fileTrainingSet)
return (processedTrainingDataset)
}
unionset <- rbind(processTestDataset(), processTrainingDataset())
setwd("~/git_repositories/data-science-specialization/GettingAndCleaningDataProject")
## This function checks whether a measurement label contains
## the substrings "mean()" or "std()".
isMedianOrMeanMeasurement <- function (measurement=""){
## testing whether measurement refers to the mean or standard deviation
return(length(grep("mean()", measurement, fixed=TRUE)) > 0
|| length(grep("std()", measurement, fixed=TRUE)) > 0)
}
## This function reads and process the test dataset.
## The processing steps includes:
##      * Keeping only the columns with the mean and standard deviation
##        for each measurement
##      * Adding a column for the subjects
##      * Adding columns with the activity identifier and the activity
processDataset <- function(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTests, colNameSubjectID,
fileAcivityClassifications, fileTestSet){
## Reading the test files
#### Reading the feature labels for the columns in the test and training datasets
featuresLabels <- read.table(fileFeatureLabels)
indexMeasurementsToKeep <- which(sapply(featuresLabels$V2,isMedianOrMeanMeasurement))
#### Reading the activity labels for the test and training datasets
activityLabels <- read.table(fileActivityLabels)
colnames(activityLabels) <- c(colActivityID, colActivity)
#### Reading the subject identifiers (ID) for the test dataset
testSubjectsIDs <- read.table(fileSubjectTests)
colnames(testSubjectsIDs) <- colNameSubjectID
#### Reading the activity identifiers for the test data
activityClassification <- read.table(fileAcivityClassifications)
colnames(activityClassification) <- c(colActivityID)
activityClassification <- merge(activityClassification, activityLabels, by.x=colActivityID, by.y=colActivityID, all=TRUE)
#### Reading the test dataset
testDataset <- read.table(fileTestSet)
colnames(testDataset) <- featuresLabels[,2]
print("Reading file")
print(fileTestSet)
print("Number rows = ")
print(nrow(testDataset))
## Processing the test dataset to return
#### Extracting the mean and standard deviations measurements
testDataset <- testDataset[, indexMeasurementsToKeep]
#### Adding the subjects and the activities to the test dataset
processedTestDataset <- cbind(testSubjectsIDs, activityClassification, testDataset)
#### returning the processed test dataset
return (processedTestDataset)
}
processTestDataset <- function(){
## Setting the locations of the test files
locationMainDirectoryData <- "./UCI_HAR_Dataset"
locationTestDirectoryData <- paste(locationMainDirectoryData, "/test", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTestSet <- paste(locationTestDirectoryData, "/X_test.txt", sep="")
fileSubjectTests <- paste(locationTestDirectoryData, "/subject_test.txt", sep="")
fileAcivityClassifications <- paste(locationTestDirectoryData, "/y_test.txt", sep="")
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "subject_identifier"
colActivityID <- "activity_id"
colActivity <- "activity"
processedTestDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTests, colNameSubjectID,
fileAcivityClassifications,
fileTestSet)
return (processedTestDataset)
}
processTrainingDataset <- function(){
## Setting the locations of the training files
locationMainDirectoryData <- "./UCI_HAR_Dataset"
locationTrainingDirectoryData <- paste(locationMainDirectoryData, "/train", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTrainingSet <- paste(locationTrainingDirectoryData, "/X_train.txt", sep="")
fileSubjectTraining <- paste(locationTrainingDirectoryData, "/subject_train.txt", sep="")
fileAcivityClassifications <- paste(locationTrainingDirectoryData, "/y_train.txt", sep="")
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "subject_identifier"
colActivityID <- "activity_id"
colActivity <- "activity"
processedTrainingDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTraining, colNameSubjectID,
fileAcivityClassifications,
fileTrainingSet)
return (processedTrainingDataset)
}
unionset <- rbind(processTestDataset(), processTrainingDataset())
View(unionset)
## This function checks whether a measurement label contains
## the substrings "mean()" or "std()".
isMedianOrMeanMeasurement <- function (measurement=""){
## testing whether measurement refers to the mean or standard deviation
return(length(grep("mean()", measurement, fixed=TRUE)) > 0
|| length(grep("std()", measurement, fixed=TRUE)) > 0)
}
## This function reads and process the dataset.
## The processing steps includes:
##      * Keeping only the columns with the mean and standard deviation
##        for each measurement
##      * Adding a column for the subjects
##      * Adding columns with the activity identifier and the activity
processDataset <- function(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubject, colNameSubjectID,
fileAcivityClassifications, fileDataset){
## Reading the files given as input
#### Reading the feature labels for the columns in dataset
featuresLabels <- read.table(fileFeatureLabels)
indexMeasurementsToKeep <- which(sapply(featuresLabels$V2,isMedianOrMeanMeasurement))
#### Reading the activity labels for the dataset
activityLabels <- read.table(fileActivityLabels)
colnames(activityLabels) <- c(colActivityID, colActivity)
#### Reading the subject identifiers (ID) for the dataset
subjectsIDs <- read.table(fileSubject)
colnames(subjectsIDs) <- colNameSubjectID
#### Reading the activity identifiers for the dataset
activityClassification <- read.table(fileAcivityClassifications)
colnames(activityClassification) <- c(colActivityID)
activityClassification <- merge(activityClassification, activityLabels, by.x=colActivityID, by.y=colActivityID, all=TRUE)
#### Reading the dataset
dataset <- read.table(fileDataset)
colnames(dataset) <- featuresLabels[,2]
## Processing the dataset to return
#### Extracting the mean and standard deviations measurements
dataset <- dataset[, indexMeasurementsToKeep]
#### Adding the subjects and the activities to the dataset
processedDataset <- cbind(subjectsIDs, activityClassification, dataset)
#### returning the processed dataset
return (processedDataset)
}
processTestDataset <- function(){
## Setting the locations of the test files
locationMainDirectoryData <- "./UCI_HAR_Dataset"
locationTestDirectoryData <- paste(locationMainDirectoryData, "/test", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTestSet <- paste(locationTestDirectoryData, "/X_test.txt", sep="")
fileSubjectTests <- paste(locationTestDirectoryData, "/subject_test.txt", sep="")
fileAcivityClassifications <- paste(locationTestDirectoryData, "/y_test.txt", sep="")
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "subject_identifier"
colActivityID <- "activity_id"
colActivity <- "activity"
processedTestDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTests, colNameSubjectID,
fileAcivityClassifications,
fileTestSet)
return (processedTestDataset)
}
processTrainingDataset <- function(){
## Setting the locations of the training files
locationMainDirectoryData <- "./UCI_HAR_Dataset"
locationTrainingDirectoryData <- paste(locationMainDirectoryData, "/train", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTrainingSet <- paste(locationTrainingDirectoryData, "/X_train.txt", sep="")
fileSubjectTraining <- paste(locationTrainingDirectoryData, "/subject_train.txt", sep="")
fileAcivityClassifications <- paste(locationTrainingDirectoryData, "/y_train.txt", sep="")
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "subject_identifier"
colActivityID <- "activity_id"
colActivity <- "activity"
processedTrainingDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTraining, colNameSubjectID,
fileAcivityClassifications,
fileTrainingSet)
return (processedTrainingDataset)
}
unionset <- rbind(processTestDataset(), processTrainingDataset())
## This function checks whether a measurement label contains
## the substrings "mean()" or "std()".
isMedianOrMeanMeasurement <- function (measurement=""){
## testing whether measurement refers to the mean or standard deviation
return(length(grep("mean()", measurement, fixed=TRUE)) > 0
|| length(grep("std()", measurement, fixed=TRUE)) > 0)
}
## This function reads and process the dataset.
## The processing steps includes:
##      * Keeping only the columns with the mean and standard deviation
##        for each measurement
##      * Adding a column for the subjects
##      * Adding columns with the activity identifier and the activity
processDataset <- function(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubject, colNameSubjectID,
fileAcivityClassifications, fileDataset){
## Reading the files given as input
#### Reading the feature labels for the columns in dataset
featuresLabels <- read.table(fileFeatureLabels)
indexMeasurementsToKeep <- which(sapply(featuresLabels$V2,isMedianOrMeanMeasurement))
#### Reading the activity labels for the dataset
activityLabels <- read.table(fileActivityLabels)
colnames(activityLabels) <- c(colActivityID, colActivity)
#### Reading the subject identifiers (ID) for the dataset
subjectsIDs <- read.table(fileSubject)
colnames(subjectsIDs) <- colNameSubjectID
#### Reading the activity identifiers for the dataset
activityClassification <- read.table(fileAcivityClassifications)
colnames(activityClassification) <- c(colActivityID)
activityClassification <- merge(activityClassification, activityLabels, by.x=colActivityID, by.y=colActivityID, all=TRUE)
#### Reading the dataset
dataset <- read.table(fileDataset)
colnames(dataset) <- featuresLabels[,2]
## Processing the dataset to return
#### Extracting the mean and standard deviations measurements
dataset <- dataset[, indexMeasurementsToKeep]
#### Adding the subjects and the activities to the dataset
processedDataset <- cbind(subjectsIDs, activityClassification, dataset)
#### returning the processed dataset
return (processedDataset)
}
processTestDataset <- function(colNameSubjectID, colActivityID, colActivity){
## Setting the locations of the test files
locationMainDirectoryData <- "./UCI_HAR_Dataset"
locationTestDirectoryData <- paste(locationMainDirectoryData, "/test", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTestSet <- paste(locationTestDirectoryData, "/X_test.txt", sep="")
fileSubjectTests <- paste(locationTestDirectoryData, "/subject_test.txt", sep="")
fileAcivityClassifications <- paste(locationTestDirectoryData, "/y_test.txt", sep="")
processedTestDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTests, colNameSubjectID,
fileAcivityClassifications,
fileTestSet)
return (processedTestDataset)
}
processTrainingDataset <- function(colNameSubjectID, colActivityID, colActivity){
## Setting the locations of the training files
locationMainDirectoryData <- "./UCI_HAR_Dataset"
locationTrainingDirectoryData <- paste(locationMainDirectoryData, "/train", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTrainingSet <- paste(locationTrainingDirectoryData, "/X_train.txt", sep="")
fileSubjectTraining <- paste(locationTrainingDirectoryData, "/subject_train.txt", sep="")
fileAcivityClassifications <- paste(locationTrainingDirectoryData, "/y_train.txt", sep="")
processedTrainingDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTraining, colNameSubjectID,
fileAcivityClassifications,
fileTrainingSet)
return (processedTrainingDataset)
}
### main body of the program to create the tidy dataset
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "subject_identifier"
colActivityID <- "activity_id"
colActivity <- "activity"
processedTestDataset <- processTestDataset(colNameSubjectID, colActivityID, colActivity)
processedTrainingDataset <- processTrainingDataset(colNameSubjectID, colActivityID, colActivity)
processedMergedDataset <- rbind(processedTestDataset, processedTrainingDataset
processedMergedDataset <- rbind(processedTestDataset, processedTrainingDataset
## This function checks whether a measurement label contains
## the substrings "mean()" or "std()".
isMedianOrMeanMeasurement <- function (measurement=""){
## testing whether measurement refers to the mean or standard deviation
return(length(grep("mean()", measurement, fixed=TRUE)) > 0
|| length(grep("std()", measurement, fixed=TRUE)) > 0)
}
## This function reads and process the dataset.
## The processing steps includes:
##      * Keeping only the columns with the mean and standard deviation
##        for each measurement
##      * Adding a column for the subjects
##      * Adding columns with the activity identifier and the activity
processDataset <- function(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubject, colNameSubjectID,
fileAcivityClassifications, fileDataset){
## Reading the files given as input
#### Reading the feature labels for the columns in dataset
featuresLabels <- read.table(fileFeatureLabels)
indexMeasurementsToKeep <- which(sapply(featuresLabels$V2,isMedianOrMeanMeasurement))
#### Reading the activity labels for the dataset
activityLabels <- read.table(fileActivityLabels)
colnames(activityLabels) <- c(colActivityID, colActivity)
#### Reading the subject identifiers (ID) for the dataset
subjectsIDs <- read.table(fileSubject)
colnames(subjectsIDs) <- colNameSubjectID
#### Reading the activity identifiers for the dataset
activityClassification <- read.table(fileAcivityClassifications)
colnames(activityClassification) <- c(colActivityID)
activityClassification <- merge(activityClassification, activityLabels, by.x=colActivityID, by.y=colActivityID, all=TRUE)
#### Reading the dataset
dataset <- read.table(fileDataset)
colnames(dataset) <- featuresLabels[,2]
## Processing the dataset to return
#### Extracting the mean and standard deviations measurements
dataset <- dataset[, indexMeasurementsToKeep]
#### Adding the subjects and the activities to the dataset
processedDataset <- cbind(subjectsIDs, activityClassification, dataset)
#### returning the processed dataset
return (processedDataset)
}
processTestDataset <- function(colNameSubjectID, colActivityID, colActivity){
## Setting the locations of the test files
locationMainDirectoryData <- "./UCI_HAR_Dataset"
locationTestDirectoryData <- paste(locationMainDirectoryData, "/test", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTestSet <- paste(locationTestDirectoryData, "/X_test.txt", sep="")
fileSubjectTests <- paste(locationTestDirectoryData, "/subject_test.txt", sep="")
fileAcivityClassifications <- paste(locationTestDirectoryData, "/y_test.txt", sep="")
processedTestDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTests, colNameSubjectID,
fileAcivityClassifications,
fileTestSet)
return (processedTestDataset)
}
processTrainingDataset <- function(colNameSubjectID, colActivityID, colActivity){
## Setting the locations of the training files
locationMainDirectoryData <- "./UCI_HAR_Dataset"
locationTrainingDirectoryData <- paste(locationMainDirectoryData, "/train", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTrainingSet <- paste(locationTrainingDirectoryData, "/X_train.txt", sep="")
fileSubjectTraining <- paste(locationTrainingDirectoryData, "/subject_train.txt", sep="")
fileAcivityClassifications <- paste(locationTrainingDirectoryData, "/y_train.txt", sep="")
processedTrainingDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTraining, colNameSubjectID,
fileAcivityClassifications,
fileTrainingSet)
return (processedTrainingDataset)
}
### main body of the program to create the tidy dataset
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "subject_identifier"
colActivityID <- "activity_id"
colActivity <- "activity"
processedTestDataset <- processTestDataset(colNameSubjectID, colActivityID, colActivity)
processedTrainingDataset <- processTrainingDataset(colNameSubjectID, colActivityID, colActivity)
processedMergedDataset <- rbind(processedTestDataset, processedTrainingDataset)
## This function checks whether a measurement label contains
## the substrings "mean()" or "std()".
isMedianOrMeanMeasurement <- function (measurement=""){
## testing whether measurement refers to the mean or standard deviation
return(length(grep("mean()", measurement, fixed=TRUE)) > 0
|| length(grep("std()", measurement, fixed=TRUE)) > 0)
}
## This function reads and process the dataset.
## The processing steps includes:
##      * Keeping only the columns with the mean and standard deviation
##        for each measurement
##      * Adding a column for the subjects
##      * Adding columns with the activity identifier and the activity
processDataset <- function(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubject, colNameSubjectID,
fileAcivityClassifications, fileDataset){
## Reading the files given as input
#### Reading the feature labels for the columns in dataset
featuresLabels <- read.table(fileFeatureLabels)
indexMeasurementsToKeep <- which(sapply(featuresLabels$V2,isMedianOrMeanMeasurement))
#### Reading the activity labels for the dataset
activityLabels <- read.table(fileActivityLabels)
colnames(activityLabels) <- c(colActivityID, colActivity)
#### Reading the subject identifiers (ID) for the dataset
subjectsIDs <- read.table(fileSubject)
colnames(subjectsIDs) <- colNameSubjectID
#### Reading the activity identifiers for the dataset
activityClassification <- read.table(fileAcivityClassifications)
colnames(activityClassification) <- c(colActivityID)
activityClassification <- merge(activityClassification, activityLabels, by.x=colActivityID, by.y=colActivityID, all=TRUE)
#### Reading the dataset
dataset <- read.table(fileDataset)
colnames(dataset) <- featuresLabels[,2]
## Processing the dataset to return
#### Extracting the mean and standard deviations measurements
dataset <- dataset[, indexMeasurementsToKeep]
#### Adding the subjects and the activities to the dataset
processedDataset <- cbind(subjectsIDs, activityClassification, dataset)
#### returning the processed dataset
return (processedDataset)
}
processTestDataset <- function(colNameSubjectID, colActivityID,
colActivity, locationMainDirectoryData){
## Setting the locations of the test files
locationTestDirectoryData <- paste(locationMainDirectoryData, "/test", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTestSet <- paste(locationTestDirectoryData, "/X_test.txt", sep="")
fileSubjectTests <- paste(locationTestDirectoryData, "/subject_test.txt", sep="")
fileAcivityClassifications <- paste(locationTestDirectoryData, "/y_test.txt", sep="")
processedTestDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTests, colNameSubjectID,
fileAcivityClassifications,
fileTestSet)
return (processedTestDataset)
}
processTrainingDataset <- function(colNameSubjectID, colActivityID,
colActivity, locationMainDirectoryData){
## Setting the locations of the training files
locationTrainingDirectoryData <- paste(locationMainDirectoryData, "/train", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTrainingSet <- paste(locationTrainingDirectoryData, "/X_train.txt", sep="")
fileSubjectTraining <- paste(locationTrainingDirectoryData, "/subject_train.txt", sep="")
fileAcivityClassifications <- paste(locationTrainingDirectoryData, "/y_train.txt", sep="")
processedTrainingDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTraining, colNameSubjectID,
fileAcivityClassifications,
fileTrainingSet)
return (processedTrainingDataset)
}
### main body of the program to create the tidy dataset
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "subject_identifier"
colActivityID <- "activity_id"
colActivity <- "activity"
## setting the main location of the directory with the test and training sets
locationMainDirectoryDatasets <- "./UCI_HAR_Dataset"
processedTestDataset <- processTestDataset(colNameSubjectID, colActivityID, colActivity, locationMainDirectoryDatasets)
processedTrainingDataset <- processTrainingDataset(colNameSubjectID, colActivityID, colActivity, locationMainDirectoryDatasets)
processedMergedDataset <- rbind(processedTestDataset, processedTrainingDataset)
View(processedMergedDataset)
library(data.table)
library(reshape2)
