return(length(grep("mean()", measurement, fixed=TRUE)) > 0
|| length(grep("std()", measurement, fixed=TRUE)) > 0)
}
## Function: processDataset
## This function reads and process the dataset based on the locations
## provided as arguments.
## The processing steps includes:
##      * Keeping only the columns with the mean and standard deviation
##        for each measurement
##      * Adding a column for the subjects
##      * Adding columns with the activity identifier and the activity
processDataset <- function(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubject, colNameSubjectID,
fileAcivityClassifications, fileDataset){
## Reading the files given as input
#### Reading the feature labels for the columns in dataset
featuresLabels <- read.table(fileFeatureLabels)
indexMeasurementsToKeep <- which(sapply(featuresLabels$V2,isMedianOrMeanMeasurement))
#### Reading the activity labels for the dataset
activityLabels <- read.table(fileActivityLabels)
colnames(activityLabels) <- c(colActivityID, colActivity)
#### Reading the subject identifiers (ID) for the dataset
subjectsIDs <- read.table(fileSubject)
colnames(subjectsIDs) <- colNameSubjectID
#### Reading the activity identifiers for the dataset
activityClassification <- read.table(fileAcivityClassifications)
colnames(activityClassification) <- c(colActivityID)
activityClassification <- merge(activityClassification, activityLabels, by.x=colActivityID, by.y=colActivityID)
#### Reading the dataset
dataset <- read.table(fileDataset)
colnames(dataset) <- featuresLabels[,2]
## Processing the dataset to return
#### Extracting the mean and standard deviations measurements
dataset <- dataset[, indexMeasurementsToKeep]
#### Adding the subjects and the activities to the dataset
processedDataset <- cbind(subjectsIDs, activityClassification, dataset)
#### returning the processed dataset
return (processedDataset)
}
## Function: processTestDataset
## This function creates the processed test dataset
## by calling the function 'processDataset' above
processTestDataset <- function(colNameSubjectID, colActivityID,
colActivity, locationMainDirectoryData){
## Setting the locations of the test files
locationTestDirectoryData <- paste(locationMainDirectoryData, "/test", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTestSet <- paste(locationTestDirectoryData, "/X_test.txt", sep="")
fileSubjectTests <- paste(locationTestDirectoryData, "/subject_test.txt", sep="")
fileAcivityClassifications <- paste(locationTestDirectoryData, "/y_test.txt", sep="")
processedTestDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTests, colNameSubjectID,
fileAcivityClassifications,
fileTestSet)
return (processedTestDataset)
}
## Function: processTrainingDataset
## This function creates the processed training dataset
## by calling the function 'processDataset' above
processTrainingDataset <- function(colNameSubjectID, colActivityID,
colActivity, locationMainDirectoryData){
## Setting the locations of the training files
locationTrainingDirectoryData <- paste(locationMainDirectoryData, "/train", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTrainingSet <- paste(locationTrainingDirectoryData, "/X_train.txt", sep="")
fileSubjectTraining <- paste(locationTrainingDirectoryData, "/subject_train.txt", sep="")
fileAcivityClassifications <- paste(locationTrainingDirectoryData, "/y_train.txt", sep="")
processedTrainingDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTraining, colNameSubjectID,
fileAcivityClassifications,
fileTrainingSet)
return (processedTrainingDataset)
}
## Function: createTidyDataColumns
## This function renames the columns of the tidy dataset
## that refer to variables in the original data. The
## renaming consists of adding the prefix "AVERAGE_"
## to these column names.
createTidyDataColumns <- function (tidyDataColumnNames){
## The first 3 column names remain unchanged
columnNames <- tidyDataColumnNames[1:3]
## The remaining column names refer to variables
## and have the prefix "AVERAGE_" added to them
for(i in 4:length(tidyDataColumnNames) ){
columnNames <- c(columnNames, paste("AVERAGE", tidyDataColumnNames[i], sep="_"))
}
return(columnNames)
}
#############################################################
### main body of the program to create the tidy dataset
#############################################################
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "SUBJECT_IDENTIFIER"
colActivityID <- "ACTIVITY_IDENTIFIER"
colActivity <- "ACTIVITY_LABEL"
## setting the main location of the directory with the test and training sets
locationMainDirectoryDatasets <- "./UCI_HAR_Dataset"
## setting the output location for the tidy dataset
locationTidyDataset <- "./tidy_UCI_HAR_Dataset.txt"
## creating the processed test and training datasets
processedTestDataset <- processTestDataset(colNameSubjectID, colActivityID, colActivity, locationMainDirectoryDatasets)
processedTrainingDataset <- processTrainingDataset(colNameSubjectID, colActivityID, colActivity, locationMainDirectoryDatasets)
## merging the processed test and training datasets
processedMergedDataset <- rbind(processedTestDataset, processedTrainingDataset)
## creating the tidy data set with the averages for every unique combination (subject, activity)
meltedMergedData <- melt(processedMergedDataset, id.vars = c(colNameSubjectID, colActivityID, colActivity))
tidyData <- dcast(meltedMergedData, SUBJECT_IDENTIFIER + ACTIVITY_IDENTIFIER + ACTIVITY_LABEL ~ variable, fun=mean)
## renaming the columns of the tidy dataset to reflect that values are the averages of the variables
colnames(tidyData) <- createTidyDataColumns(colnames(tidyData))
## writing the tidy dataset to a file
write.table(tidyData,locationTidyDataset, row.names=FALSE, sep=",")
View(processedTrainingDataset)
#############################################################
## Loading the needed libraries
#############################################################
library(data.table)
library(reshape2)
#############################################################
## Auxiliary functions to create the tidy dataset
## (see main body below for details on the actual processing of the tidy dataset)
#############################################################
## Function: isMedianOrMeanMeasurement
## This function checks whether a measurement label contains
## the substrings "mean()" or "std()".
isMedianOrMeanMeasurement <- function (measurement=""){
## testing whether measurement refers to the mean or standard deviation
return(length(grep("mean()", measurement, fixed=TRUE)) > 0
|| length(grep("std()", measurement, fixed=TRUE)) > 0)
}
## Function: processDataset
## This function reads and process the dataset based on the locations
## provided as arguments.
## The processing steps includes:
##      * Keeping only the columns with the mean and standard deviation
##        for each measurement
##      * Adding a column for the subjects
##      * Adding columns with the activity identifier and the activity
processDataset <- function(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubject, colNameSubjectID,
fileAcivityClassifications, fileDataset){
## Reading the files given as input
#### Reading the feature labels for the columns in dataset
featuresLabels <- read.table(fileFeatureLabels)
indexMeasurementsToKeep <- which(sapply(featuresLabels$V2,isMedianOrMeanMeasurement))
#### Reading the activity labels for the dataset
activityLabels <- read.table(fileActivityLabels)
colnames(activityLabels) <- c(colActivityID, colActivity)
#### Reading the subject identifiers (ID) for the dataset
subjectsIDs <- read.table(fileSubject)
colnames(subjectsIDs) <- colNameSubjectID
#### Reading the activity identifiers for the dataset
activityClassification <- read.table(fileAcivityClassifications)
colnames(activityClassification) <- c(colActivityID)
activityClassification <- merge(activityClassification, activityLabels, by.x=c(colActivityID), by.y=c(colActivityID))
#### Reading the dataset
dataset <- read.table(fileDataset)
colnames(dataset) <- featuresLabels[,2]
## Processing the dataset to return
#### Extracting the mean and standard deviations measurements
dataset <- dataset[, indexMeasurementsToKeep]
#### Adding the subjects and the activities to the dataset
processedDataset <- cbind(subjectsIDs, activityClassification, dataset)
#### returning the processed dataset
return (processedDataset)
}
## Function: processTestDataset
## This function creates the processed test dataset
## by calling the function 'processDataset' above
processTestDataset <- function(colNameSubjectID, colActivityID,
colActivity, locationMainDirectoryData){
## Setting the locations of the test files
locationTestDirectoryData <- paste(locationMainDirectoryData, "/test", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTestSet <- paste(locationTestDirectoryData, "/X_test.txt", sep="")
fileSubjectTests <- paste(locationTestDirectoryData, "/subject_test.txt", sep="")
fileAcivityClassifications <- paste(locationTestDirectoryData, "/y_test.txt", sep="")
processedTestDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTests, colNameSubjectID,
fileAcivityClassifications,
fileTestSet)
return (processedTestDataset)
}
## Function: processTrainingDataset
## This function creates the processed training dataset
## by calling the function 'processDataset' above
processTrainingDataset <- function(colNameSubjectID, colActivityID,
colActivity, locationMainDirectoryData){
## Setting the locations of the training files
locationTrainingDirectoryData <- paste(locationMainDirectoryData, "/train", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTrainingSet <- paste(locationTrainingDirectoryData, "/X_train.txt", sep="")
fileSubjectTraining <- paste(locationTrainingDirectoryData, "/subject_train.txt", sep="")
fileAcivityClassifications <- paste(locationTrainingDirectoryData, "/y_train.txt", sep="")
processedTrainingDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTraining, colNameSubjectID,
fileAcivityClassifications,
fileTrainingSet)
return (processedTrainingDataset)
}
## Function: createTidyDataColumns
## This function renames the columns of the tidy dataset
## that refer to variables in the original data. The
## renaming consists of adding the prefix "AVERAGE_"
## to these column names.
createTidyDataColumns <- function (tidyDataColumnNames){
## The first 3 column names remain unchanged
columnNames <- tidyDataColumnNames[1:3]
## The remaining column names refer to variables
## and have the prefix "AVERAGE_" added to them
for(i in 4:length(tidyDataColumnNames) ){
columnNames <- c(columnNames, paste("AVERAGE", tidyDataColumnNames[i], sep="_"))
}
return(columnNames)
}
#############################################################
### main body of the program to create the tidy dataset
#############################################################
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "SUBJECT_IDENTIFIER"
colActivityID <- "ACTIVITY_IDENTIFIER"
colActivity <- "ACTIVITY_LABEL"
## setting the main location of the directory with the test and training sets
locationMainDirectoryDatasets <- "./UCI_HAR_Dataset"
## setting the output location for the tidy dataset
locationTidyDataset <- "./tidy_UCI_HAR_Dataset.txt"
## creating the processed test and training datasets
processedTestDataset <- processTestDataset(colNameSubjectID, colActivityID, colActivity, locationMainDirectoryDatasets)
processedTrainingDataset <- processTrainingDataset(colNameSubjectID, colActivityID, colActivity, locationMainDirectoryDatasets)
## merging the processed test and training datasets
processedMergedDataset <- rbind(processedTestDataset, processedTrainingDataset)
## creating the tidy data set with the averages for every unique combination (subject, activity)
meltedMergedData <- melt(processedMergedDataset, id.vars = c(colNameSubjectID, colActivityID, colActivity))
tidyData <- dcast(meltedMergedData, SUBJECT_IDENTIFIER + ACTIVITY_IDENTIFIER + ACTIVITY_LABEL ~ variable, fun=mean)
## renaming the columns of the tidy dataset to reflect that values are the averages of the variables
colnames(tidyData) <- createTidyDataColumns(colnames(tidyData))
## writing the tidy dataset to a file
write.table(tidyData,locationTidyDataset, row.names=FALSE, sep=",")
View(processedTrainingDataset)
#############################################################
## Loading the needed libraries
#############################################################
library(data.table)
library(reshape2)
#############################################################
## Auxiliary functions to create the tidy dataset
## (see main body below for details on the actual processing of the tidy dataset)
#############################################################
## Function: isMedianOrMeanMeasurement
## This function checks whether a measurement label contains
## the substrings "mean()" or "std()".
isMedianOrMeanMeasurement <- function (measurement=""){
## testing whether measurement refers to the mean or standard deviation
return(length(grep("mean()", measurement, fixed=TRUE)) > 0
|| length(grep("std()", measurement, fixed=TRUE)) > 0)
}
## Function: processDataset
## This function reads and process the dataset based on the locations
## provided as arguments.
## The processing steps includes:
##      * Keeping only the columns with the mean and standard deviation
##        for each measurement
##      * Adding a column for the subjects
##      * Adding columns with the activity identifier and the activity
processDataset <- function(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubject, colNameSubjectID,
fileAcivityClassifications, fileDataset){
## Reading the files given as input
#### Reading the feature labels for the columns in dataset
featuresLabels <- read.table(fileFeatureLabels)
indexMeasurementsToKeep <- which(sapply(featuresLabels$V2,isMedianOrMeanMeasurement))
#### Reading the activity labels for the dataset
activityLabels <- read.table(fileActivityLabels)
colnames(activityLabels) <- c(colActivityID, colActivity)
#### Reading the subject identifiers (ID) for the dataset
subjectsIDs <- read.table(fileSubject)
colnames(subjectsIDs) <- colNameSubjectID
#### Reading the activity identifiers for the dataset
activityClassification <- read.table(fileAcivityClassifications)
colnames(activityClassification) <- c(colActivityID)
activityClassification <- merge(activityClassification, activityLabels, by.x=colActivityID, by.y=colActivityID, sort=FALSE)
#### Reading the dataset
dataset <- read.table(fileDataset)
colnames(dataset) <- featuresLabels[,2]
## Processing the dataset to return
#### Extracting the mean and standard deviations measurements
dataset <- dataset[, indexMeasurementsToKeep]
#### Adding the subjects and the activities to the dataset
processedDataset <- cbind(subjectsIDs, activityClassification, dataset)
#### returning the processed dataset
return (processedDataset)
}
## Function: processTestDataset
## This function creates the processed test dataset
## by calling the function 'processDataset' above
processTestDataset <- function(colNameSubjectID, colActivityID,
colActivity, locationMainDirectoryData){
## Setting the locations of the test files
locationTestDirectoryData <- paste(locationMainDirectoryData, "/test", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTestSet <- paste(locationTestDirectoryData, "/X_test.txt", sep="")
fileSubjectTests <- paste(locationTestDirectoryData, "/subject_test.txt", sep="")
fileAcivityClassifications <- paste(locationTestDirectoryData, "/y_test.txt", sep="")
processedTestDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTests, colNameSubjectID,
fileAcivityClassifications,
fileTestSet)
return (processedTestDataset)
}
## Function: processTrainingDataset
## This function creates the processed training dataset
## by calling the function 'processDataset' above
processTrainingDataset <- function(colNameSubjectID, colActivityID,
colActivity, locationMainDirectoryData){
## Setting the locations of the training files
locationTrainingDirectoryData <- paste(locationMainDirectoryData, "/train", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTrainingSet <- paste(locationTrainingDirectoryData, "/X_train.txt", sep="")
fileSubjectTraining <- paste(locationTrainingDirectoryData, "/subject_train.txt", sep="")
fileAcivityClassifications <- paste(locationTrainingDirectoryData, "/y_train.txt", sep="")
processedTrainingDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTraining, colNameSubjectID,
fileAcivityClassifications,
fileTrainingSet)
return (processedTrainingDataset)
}
## Function: createTidyDataColumns
## This function renames the columns of the tidy dataset
## that refer to variables in the original data. The
## renaming consists of adding the prefix "AVERAGE_"
## to these column names.
createTidyDataColumns <- function (tidyDataColumnNames){
## The first 3 column names remain unchanged
columnNames <- tidyDataColumnNames[1:3]
## The remaining column names refer to variables
## and have the prefix "AVERAGE_" added to them
for(i in 4:length(tidyDataColumnNames) ){
columnNames <- c(columnNames, paste("AVERAGE", tidyDataColumnNames[i], sep="_"))
}
return(columnNames)
}
#############################################################
### main body of the program to create the tidy dataset
#############################################################
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "SUBJECT_IDENTIFIER"
colActivityID <- "ACTIVITY_IDENTIFIER"
colActivity <- "ACTIVITY_LABEL"
## setting the main location of the directory with the test and training sets
locationMainDirectoryDatasets <- "./UCI_HAR_Dataset"
## setting the output location for the tidy dataset
locationTidyDataset <- "./tidy_UCI_HAR_Dataset.txt"
## creating the processed test and training datasets
processedTestDataset <- processTestDataset(colNameSubjectID, colActivityID, colActivity, locationMainDirectoryDatasets)
processedTrainingDataset <- processTrainingDataset(colNameSubjectID, colActivityID, colActivity, locationMainDirectoryDatasets)
## merging the processed test and training datasets
processedMergedDataset <- rbind(processedTestDataset, processedTrainingDataset)
## creating the tidy data set with the averages for every unique combination (subject, activity)
meltedMergedData <- melt(processedMergedDataset, id.vars = c(colNameSubjectID, colActivityID, colActivity))
tidyData <- dcast(meltedMergedData, SUBJECT_IDENTIFIER + ACTIVITY_IDENTIFIER + ACTIVITY_LABEL ~ variable, fun=mean)
## renaming the columns of the tidy dataset to reflect that values are the averages of the variables
colnames(tidyData) <- createTidyDataColumns(colnames(tidyData))
## writing the tidy dataset to a file
write.table(tidyData,locationTidyDataset, row.names=FALSE, sep=",")
View(processedTrainingDataset)
#############################################################
## Loading the needed libraries
#############################################################
library(data.table)
library(reshape2)
#############################################################
## Auxiliary functions to create the tidy dataset
## (see main body below for details on the actual processing of the tidy dataset)
#############################################################
## Function: isMedianOrMeanMeasurement
## This function checks whether a measurement label contains
## the substrings "mean()" or "std()".
isMedianOrMeanMeasurement <- function (measurement=""){
## testing whether measurement refers to the mean or standard deviation
return(length(grep("mean()", measurement, fixed=TRUE)) > 0
|| length(grep("std()", measurement, fixed=TRUE)) > 0)
}
## Function: processDataset
## This function reads and process the dataset based on the locations
## provided as arguments.
## The processing steps includes:
##      * Keeping only the columns with the mean and standard deviation
##        for each measurement
##      * Adding a column for the subjects
##      * Adding columns with the activity identifier and the activity
processDataset <- function(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubject, colNameSubjectID,
fileAcivityClassifications, fileDataset){
## Reading the files given as input
#### Reading the feature labels for the columns in dataset
featuresLabels <- read.table(fileFeatureLabels)
indexMeasurementsToKeep <- which(sapply(featuresLabels$V2,isMedianOrMeanMeasurement))
#### Reading the activity labels for the dataset
activityLabels <- read.table(fileActivityLabels)
colnames(activityLabels) <- c(colActivityID, colActivity)
#### Reading the subject identifiers (ID) for the dataset
subjectsIDs <- read.table(fileSubject)
colnames(subjectsIDs) <- colNameSubjectID
#### Reading the activity identifiers for the dataset
activityClassification <- read.table(fileAcivityClassifications)
colnames(activityClassification) <- c(colActivityID)
activityClassification <- merge(activityClassification, activityLabels,
by.x=colActivityID, by.y=colActivityID, all=TRUE, sort=FALSE)
#### Reading the dataset
dataset <- read.table(fileDataset)
colnames(dataset) <- featuresLabels[,2]
## Processing the dataset to return
#### Extracting the mean and standard deviations measurements
dataset <- dataset[, indexMeasurementsToKeep]
#### Adding the subjects and the activities to the dataset
processedDataset <- cbind(subjectsIDs, activityClassification, dataset)
#### returning the processed dataset
return (processedDataset)
}
## Function: processTestDataset
## This function creates the processed test dataset
## by calling the function 'processDataset' above
processTestDataset <- function(colNameSubjectID, colActivityID,
colActivity, locationMainDirectoryData){
## Setting the locations of the test files
locationTestDirectoryData <- paste(locationMainDirectoryData, "/test", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTestSet <- paste(locationTestDirectoryData, "/X_test.txt", sep="")
fileSubjectTests <- paste(locationTestDirectoryData, "/subject_test.txt", sep="")
fileAcivityClassifications <- paste(locationTestDirectoryData, "/y_test.txt", sep="")
processedTestDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTests, colNameSubjectID,
fileAcivityClassifications,
fileTestSet)
return (processedTestDataset)
}
## Function: processTrainingDataset
## This function creates the processed training dataset
## by calling the function 'processDataset' above
processTrainingDataset <- function(colNameSubjectID, colActivityID,
colActivity, locationMainDirectoryData){
## Setting the locations of the training files
locationTrainingDirectoryData <- paste(locationMainDirectoryData, "/train", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTrainingSet <- paste(locationTrainingDirectoryData, "/X_train.txt", sep="")
fileSubjectTraining <- paste(locationTrainingDirectoryData, "/subject_train.txt", sep="")
fileAcivityClassifications <- paste(locationTrainingDirectoryData, "/y_train.txt", sep="")
processedTrainingDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTraining, colNameSubjectID,
fileAcivityClassifications,
fileTrainingSet)
return (processedTrainingDataset)
}
## Function: createTidyDataColumns
## This function renames the columns of the tidy dataset
## that refer to variables in the original data. The
## renaming consists of adding the prefix "AVERAGE_"
## to these column names.
createTidyDataColumns <- function (tidyDataColumnNames){
## The first 3 column names remain unchanged
columnNames <- tidyDataColumnNames[1:3]
## The remaining column names refer to variables
## and have the prefix "AVERAGE_" added to them
for(i in 4:length(tidyDataColumnNames) ){
columnNames <- c(columnNames, paste("AVERAGE", tidyDataColumnNames[i], sep="_"))
}
return(columnNames)
}
#############################################################
### main body of the program to create the tidy dataset
#############################################################
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "SUBJECT_IDENTIFIER"
colActivityID <- "ACTIVITY_IDENTIFIER"
colActivity <- "ACTIVITY_LABEL"
## setting the main location of the directory with the test and training sets
locationMainDirectoryDatasets <- "./UCI_HAR_Dataset"
## setting the output location for the tidy dataset
locationTidyDataset <- "./tidy_UCI_HAR_Dataset.txt"
## creating the processed test and training datasets
processedTestDataset <- processTestDataset(colNameSubjectID, colActivityID, colActivity, locationMainDirectoryDatasets)
processedTrainingDataset <- processTrainingDataset(colNameSubjectID, colActivityID, colActivity, locationMainDirectoryDatasets)
## merging the processed test and training datasets
processedMergedDataset <- rbind(processedTestDataset, processedTrainingDataset)
## creating the tidy data set with the averages for every unique combination (subject, activity)
meltedMergedData <- melt(processedMergedDataset, id.vars = c(colNameSubjectID, colActivityID, colActivity))
tidyData <- dcast(meltedMergedData, SUBJECT_IDENTIFIER + ACTIVITY_IDENTIFIER + ACTIVITY_LABEL ~ variable, fun=mean)
## renaming the columns of the tidy dataset to reflect that values are the averages of the variables
colnames(tidyData) <- createTidyDataColumns(colnames(tidyData))
## writing the tidy dataset to a file
write.table(tidyData,locationTidyDataset, row.names=FALSE, sep=",")
View(tidyData)
View(processedTrainingDataset)
